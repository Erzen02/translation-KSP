CONTRACT_TYPE
{
	name = CleverSatConstellation
	title = 軌道上人工衛星システム構築への取り組み
	group = CleverSat
	description = 人工衛星 @/targetSat は一人で寂しそうにしている。 我々はそれを @/groupSat と同期させて動かしてほしい。- 彼らはきっと友達になるだろう。
	genericDescription = 衛星が1機だけ孤立している。移動して既にある衛星システムの一部にしよう。
	targetBody = @/targetBody1
	synopsis = 人工衛星 @/targetSat を指定された軌道に修正する
	completedMessage = これでしばらくは大丈夫だろう。もちろん、また移動させろと言われるまでは。
	targetBody = @/targetBody1
	rewardFunds = Random(20000,40000)
	rewardReputation = Random(2.0, 5.0)
	maxSimultaneous = 1

	//make a list of every CleverSat
	DATA
	{
	type = List<VesselIdentifier>
	validGroup = $SatList.Add(Group Sat).Where(g => Vessel(g).IsOrbiting())
	hidden = true
	}

	//pick one at random. This is the satellite which will form the basis of our constellation.
	DATA
	{
	type = Vessel
	uniquenessCheck = GROUP_ACTIVE
	groupSat = @validGroup.Random()
	title = あらかじめ定められた軌道上の条件に該当する衛星であること
	}

	//define the maximum deviation we'd be willing to accept when forming a constellation.
	DATA
	{
	type = double
	orbitalParameter = Prestige() == Trivial ? 1000000 : Prestige() == Significant ? 2000000 : 5000000
	targetApMin = @groupSat.Orbit().Apoapsis() - @orbitalParameter
	targetApMax = @groupSat.Orbit().Apoapsis() + @orbitalParameter
	targetPeMin = @groupSat.Orbit().Periapsis() - @orbitalParameter
	targetPeMax = @groupSat.Orbit().Periapsis() + @orbitalParameter
	targetInMin = @groupSat.Orbit().Inclination() - 10
	targetInMax = @groupSat.Orbit().Inclination() + 10
	targetLanMin = @groupSat.Orbit().LAN() - 100
	targetLanMax = @groupSat.Orbit().LAN() + 100
	hidden = true
	}

	//find a vessel that is within the parameters specified above.
	DATA
	{
	type = List<VesselIdentifier>
	validTarget = $SatList.Add(Target).Where(t => Vessel(t).IsOrbiting() && Vessel(t).Orbit().Apoapsis() > @/targetApMin && Vessel(t).Orbit().Apoapsis() < @/targetApMax && Vessel(t).Orbit().Periapsis() > @/targetPeMin && Vessel(t).Orbit().Periapsis() < @/targetPeMax && Vessel(t).Orbit().Inclination() > @/targetInMin && Vessel(t).Orbit().Inclination() < @/targetInMax && Vessel(t).CelestialBody() == @/targetBody1 && Vessel(t).Orbit().Apoapsis()!=@groupSat.Orbit().Apoapsis() && Vessel(t).Orbit().LAN() > @/targetLanMin && Vessel(t).Orbit().LAN() < @/targetLanMax)
	hidden = true
	}

	//pick one of those at random
	DATA
	{
	type = Vessel
	uniquenessCheck = GROUP_ACTIVE
	targetSat = @validTarget.SelectUnique()
	title = 衛星がシステムを形成するのに十分な距離内にいること
	}

	DATA
	{
	type = CelestialBody
	targetBody1 = @/groupSat.CelestialBody()
	hidden = true
	}

	//check the target is not already part of a Constellation
	DATA
	{
	type = List<VesselIdentifier>
	requiredValue = false
	validConstellation = $ConstellationList.Add(Valid).Where(v => Vessel(v) == @targetSat)
	hidden = true
	}

	//this should just grab the "base" satellite and copy it's orbit.
	BEHAVIOUR
{
    name = OrbitGenerator
    type = OrbitGenerator

	FIXED_ORBIT
	{
	ORBIT = @/groupSat.Orbit()
	}
}


PARAMETER
{
    name = VesselParameterGroup
    type = VesselParameterGroup
	vessel = @/targetSat
	defineList = ConstellationList
PARAMETER
{
    name = Orbit
	type = ReachSpecificOrbit
	index = 0
	deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
}
}
REQUIREMENT
{
name = GroupCheck
type = Expression
expression = (((@/groupSat.Orbit().Apoapsis()-@/targetSat.Orbit().Apoapsis())>1000000) || ((@/targetSat.Orbit().Apoapsis()-@/targetSat.Orbit().Apoapsis())>1000000))
title = ターゲットがまだ要件を満たしていることを再確認する
}
}
