CONTRACT_TYPE
{
	name = CleverSatConstellationShift
	title = 衛星コンステレーションを移動させる
	group = CleverSat
	description = 恥ずかしい話だが、我々が以前打ち上げた @/firstTarget コンステレーションは軌道を誤っているようだ。よって、君にそれを移動してもらいたい。
	genericDescription = 我々のコンステレーションが間違った場所に配備されている。これを移動させる必要がある。
	targetBody = @/targetBody1
	synopsis = コンステレーション @/firstTarget を正しい軌道に修正する
	completedMessage = これでしばらくは大丈夫だろう。もちろん、また移動させろと言われるまでは。
	targetBody = @/targetBody1
	rewardFunds = Random(10000,20000)
	rewardReputation = Random(1.0, 2.0)
	maxSimultaneous = 1

	DATA
	{
	type = List<VesselIdentifier>
	validTarget = $ConstellationList.Add(Target).Where(g => Vessel(g).IsOrbiting() && Vessel(g).Orbit().Inclination() < incThreshold)
	conTargets = $SatList.Add(Target).Where(t => Vessel(t).IsOrbiting() && Vessel(t).Orbit().Apoapsis() > @/targetApMin && Vessel(t).Orbit().Apoapsis() < @/targetApMax && Vessel(t).Orbit().Periapsis() > @/targetPeMin && Vessel(t).Orbit().Periapsis() < @/targetPeMax && Vessel(t).Orbit().Inclination() > @/targetInMin && Vessel(t).Orbit().Inclination() < @/targetInMax && Vessel(t).CelestialBody() == @/targetBody1 && Vessel(t).Orbit().LAN() > @/targetLanMin && Vessel(t).Orbit().LAN() < @/targetLanMax))
	hidden = true
	}

	DATA
	{
	type = Vessel
	uniquenessCheck = GROUP_ACTIVE
	firstTarget = @validTarget.SelectUnique()
	title = あらかじめ決められた軌道上のパラメータ内に衛星があること
	}

	//define how close they have to be to be in a Constellation.
	DATA
	{
	type = double
	targetApMin = @firstTarget.Orbit().Apoapsis() - 1000000
	targetApMax = @firstTarget.Orbit().Apoapsis() + 1000000
	targetPeMin = @firstTarget.Orbit().Periapsis() - 1000000
	targetPeMax = @firstTarget.Orbit().Periapsis() + 1000000
	targetInMin = @firstTarget.Orbit().Inclination() - 10
	targetInMax = @firstTarget.Orbit().Inclination() + 10
	targetLanMin = @firstTarget.Orbit().LAN() - 10
	targetLanMax = @firstTarget.Orbit().LAN() + 10
	incThreshold = Prestige() == Trivial ? 20 : Prestige() == Significant ? 90 : 180
	hidden = true
	}

	DATA
	{
	type = CelestialBody
	targetBody1 = @/firstTarget.CelestialBody()
	hidden = true
	}

	BEHAVIOUR
	{
    name = OrbitGenerator
    type = OrbitGenerator

		RANDOM_ORBIT
		{
		type = RANDOM
		altitudeFactor = @/targetBody1.IsMoon() ? 0.8 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.3 : 0.5
		inclinationFactor = @/targetBody1.IsSun() ? 0 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.5 : 0.8
		}
	}
PARAMETER
{
	type = VesselParameterGroup

	ITERATOR
	{
	type = VesselIdentifier
	vessel = @/conTargets
	}

	PARAMETER
	{
		name = ReachSpecificOrbit
		type = ReachSpecificOrbit
		index = 0
		deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
	}
}

REQUIREMENT
{
name = SatCount
type = Expression
expression = @/conTargets.Count()>2
title = ターゲットがコンステレーション内に存在すること
}
REQUIREMENT
{
name = Expression
type = Expression
checkOnActiveContract = false
expression = @CleverSat:RNG <3
title = 内部乱数に気に入られていること
}
}
