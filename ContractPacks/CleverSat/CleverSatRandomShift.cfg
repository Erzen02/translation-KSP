CONTRACT_TYPE
{
	name = CleverSatRandomShift
	title = 衛星を移動せよ
	group = CleverSat
	description = 契約元から人工衛星 @/targetSat を新たな軌道に移動して欲しいという依頼が来た。そこで、君の出番だ。
	genericDescription = 契約元から衛星を新しい軌道に移動させるよう依頼があった。では、それに取り掛かろう。
	targetBody = @/targetBody1
	synopsis = 衛星 @/targetSat を正しい軌道に移動する
	completedMessage = これでしばらくは大丈夫だろう。もちろん、また移動させろと言われるまでは。
	rewardFunds = Random(20000,40000)
	rewardReputation = Random(1.0, 2.0)
	maxSimultaneous = 1

	DATA
	{
	type = List<VesselIdentifier>
	requiredValue = false
	excludeTargets = $ConstellationList.Add(Target).Where(g => Vessel(g).IsOrbiting() && Vessel(g).Orbit().Inclination() < incThreshold))
	}
	DATA
	{
	type = List<VesselIdentifier>
	requiredValue = false
	validTarget = $SatList.ExcludeAll(@excludeTargets)
	}

	DATA
	{
	type = double
	incThreshold = Prestige() == Trivial ? 20 : Prestige() == Significant ? 90 : 180
	}

	DATA
	{
	type = Vessel
	uniquenessCheck = GROUP_ALL
	targetSat = @validTarget.Random()
	title = あらかじめ定められたパラメータの軌道上に衛星が配置されていること
	}

	DATA
	{
	type = CelestialBody
	targetBody1 = @/targetSat.CelestialBody()
	hidden = true
	}

		BEHAVIOUR
	{
    name = OrbitGenerator
    type = OrbitGenerator

	RANDOM_ORBIT
	{
	type = RANDOM
		altitudeFactor = @/targetBody1.IsMoon() ? 0.8 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.3 : 0.5
		inclinationFactor = @/targetBody1.IsSun() ? 0 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.5 : 0.8
	}
}
PARAMETER
{
	type = VesselParameterGroup
	vessel = @/targetSat

	PARAMETER
	{
		name = ReachSpecificOrbit
		type = ReachSpecificOrbit
		index = 0
		deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
	}
}
REQUIREMENT
{
name = Expression
type = Expression
checkOnActiveContract = false
expression = @CleverSat:RNG <3
title = 内部乱数に気に入られていること
}
}
