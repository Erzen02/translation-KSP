    CONTRACT_TYPE
    {
        name = KerbalAcademyAdvancedPiloting
        title = カーバルアカデミー: 高度な操縦
		group = KerbalAcademy
        description = どうやら @/trainee はそのスキルを向上させる準備ができているようだ。これらのコースをクリアすることで、新たなレベルに到達できるだろう。
		genericDescription = パイロットを先進的なプログラムに参加させる。
        synopsis = 訓練対象 @/trainee によってコースを完了する
        completedMessage = よくやった。 @/trainee は新たな経験を掴み取ったようだ。
        agent = Kerbal Academy
		notes = コースは順番にクリアされる必要がある
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = @/homeworld
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = -100000

		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>0 && m.ExperienceLevel()<5).SelectUnique()
			title = 訓練に利用可能なパイロットがいること
		}

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Pilot && m.Type() == Crew && m.ExperienceLevel() > @/mentorLevel)
		}

		DATA
		{
			type = double
			newLevel = @/trainee.ExperienceLevel()+1
			expAward = @newLevel == 5 ? 32 : @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			mentorLevel = @/trainee.ExperienceLevel()+1
		}

				DATA
		{
			type = List<CelestialBody>
			requiredValue = false
			notKerbin = AllBodies().Where(b=> b.IsHomeWorld())
			notMoon = HomeWorld().Children()
			l5Body1 = OrbitedBodies().ExcludeAll(@notKerbin)
			l5BodyList = @l5Body1.ExcludeAll(@notMoon)
		}

		DATA
		{
			type = CelestialBody
			requiredValue = false
			moon = HomeWorld().Children().Random()
			homeworld = HomeWorld()
			l5body = @/l5BodyList.Random()
		}


		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}


	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		kerbal = @/trainee
	}


	PARAMETER
	{
    name = Orbit
    type = Orbit
	targetBody = @/homeworld
	maxInclination = 5
	disableOnStateChange = true
	title = 赤道軌道に到達する
	completeInSequence = true
	}

		PARAMETER
	{
    name = Orbit
    type = Orbit
	targetBody = @/homeworld
	completeInSequence = true
	disableOnStateChange = true
	minInclination = 45
	title = 傾斜軌道に移動する

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/newLevel == 2)
	}
	}

	PARAMETER
	{
    name = ReachState
    type = ReachState
	completeInSequence = true
	situation = ESCAPING
	disableOnStateChange = true
	targetBody = @/moon
	title = 目標 @/moon へのフライバイを行う

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/newLevel == 3)
	}

	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 2
	}
	}

		PARAMETER
	{
    name = ReachState
    type = ReachState
	situation = ORBITING
	disableOnStateChange = true
	completeInSequence = true
	targetBody = @/moon
	title = 目標 @/moon の周回軌道に到達する

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/newLevel == 4)
	}

	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 2
	}
	}

			PARAMETER
	{
    name = ReachState
    type = ReachState
	disableOnStateChange = true
	completeInSequence = true
	situation = ORBITING
	targetBody = @/l5body
	title = 目標 @/l5body の周回軌道に到達する

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/newLevel == 5)
	}

	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 2
	}
	}


	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/trainee.RosterStatus() == Available && @/mentorList.Count() == 0 && @/trainee.ExperienceLevel() < @/newLevel)
		title = カーバルは先進プログラムの資格を得る必要がある（これが失敗しても、有効な訓練生が見つかれば、Flight School 101の資格を得ることができる）。
	}
}





