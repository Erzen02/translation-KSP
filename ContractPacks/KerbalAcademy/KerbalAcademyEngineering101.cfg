    CONTRACT_TYPE
    {
        name = KerbalAcademyEngineering101
        title = カーバルアカデミー: エンジニアリング 101
		group = KerbalAcademy
        description = どうやら @/trainee はソケットレンチとハンマーの区別がつかないようだ。 そこで経験のある @/mentor が手を貸してくれるだろう。
		genericDescription = 我々のエンジニアの一人が、同僚に遅れをとっている。幸いなことに、私たちには良い教官役がいる。
        synopsis = 訓練対象者 @/trainee とその教官 @/mentor を訓練体験に連れて行く
        completedMessage = 完璧だ。 @/trainee は @/mentor からの経験を受け取ることができたようだ。
		notes = これはあくまでシミュレーションです。「壊れた」パーツは実際は正常に機能しているように見えます。
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost

		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.ExperienceLevel()>=2 && m.Type() == Crew && m.RosterStatus() == Available).Random()
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.ExperienceLevel()<= @/minExperience && m.Type() == Crew && m.RosterStatus() == Available).Random()
			title = 基本プログラムの資格を持つカーバルと、それより2レベル以上高いスキルを持つ教官役がいること。
		}

		DATA
		{
			type = int
			levelGain = @/mentor.ExperienceLevel() - @/trainee.ExperienceLevel()-1
			newLevel = Random(1, @/mentor.ExperienceLevel()-1)
		}

		DATA
		{
			type = double
			rewardMultiplier = Random(@/newLevel, @/levelGain)
			trainingCost = @/rewardMultiplier*-100000
			expAward = @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			minExperience = @/mentor.ExperienceLevel()-2
			simLevel = Random((@/trainee.ExperienceLevel()+1), @newLevel)
			simTime = Random(60, @simLevel*100)
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

		BEHAVIOUR
	{
    name = DialogBox
    type = DialogBox

		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = ChuteCheck
		titleColor = #BADA55
		TEXT
			{
			text = さあ、あなたの腕前を披露する時が来ました。このシミュレーションでは、パラシュートが破損していることになっています。外に出て修理してください。
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}
		}

		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = LegCheck
		titleColor = #BADA55
		TEXT
			{
			text = さて、次はあなたの腕前を披露してもらいましょう。このシミュレーションでは着陸脚が展開するのを拒否していることになっています。外に出て修理してください。
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}
		}

				DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = WheelCheck
		titleColor = #BADA55
		TEXT
			{
			text = さて、次はあなたの腕前を披露してもらいましょう。このシミュレーションでは、車輪にギアが入っていないことになっています。外に出て修理してください。
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}
		}

		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = EVASim
		titleColor = #BADA55
		TEXT
			{
			text = お疲れ様でした。KSCに戻ったら、メダルが待っていますよ。
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}
		}
	}


	PARAMETER
	{
	name = ChuteCheck
	type = All
	hideChildren = true
	title = 訓練対象者 @/mentor と教官 @/trainee をパラシュートを備えた機体から出してください。
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor
			kerbal = @/trainee
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleParachute
		}
		REQUIREMENT
			{
				name = Expression
				type = Expression
				expression = @/simLevel == 1
			}
	}

	PARAMETER
	{
	name = LegCheck
	type = All
	title = 訓練対象者 @/mentor と教官 @/trainee を着陸脚を備えた機体から出してください。
	hideChildren = true
			PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor
			kerbal = @/trainee
		}
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleWheelDeployment
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @/simLevel == 2
		}
	}

		PARAMETER
	{
	name = LegCheck
	type = All
	title = 訓練対象者 @/mentor と教官 @/trainee を車輪を備えた機体から出してください。
	hideChildren = true
			PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor
			kerbal = @/trainee
		}
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleWheelMotor
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @/simLevel == 3
		}
	}

	PARAMETER
	{
		name = EVASim
		type = All
		completeInSequence = true
		hideChildren = true
		title = 訓練対象者 @/trainee をシミュレーションのために船外活動させてください。

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = EVA
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}
	}

	PARAMETER
	{
		name = Duration
		type = Duration
		duration = @/simTime
		preWaitText = シミュレーションのパラメータが満たされるのを待っている
		waitingText = シミュレーションを実行中
		completionText = シミュレーション完了
		startCriteria = PARAMETER_COMPLETION
		parameter = EVASim
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/mentor.RosterStatus() == Available && @/trainee.RosterStatus() == Available && @/trainee.ExperienceLevel()<@/minExperience)
		title = メンターとトレーニーの両方が名簿に登録されている必要がある。
	}
}





