    CONTRACT_TYPE
    {
        name = KerbalAcademyEngineeringSchool
        title = カーバルアカデミー: エンジニアリングスクール
		group = KerbalAcademy
        description = @/newLevel <4 ? @/repairString : @/tourString
		genericDescription = エンジニアをアドバンストプログラムに参加させる
        synopsis = 訓練対象者 @/trainee で訓練プログラムを完了する
        completedMessage = おめでとう、 @/trainee はより高度な経験を感じ取ったようだ
		notes = @/newLevel <4 ? "これはあくまでシミュレーションです。誤動作しているパーツは実際は動いているように見えます。" :
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = @/homeworld
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = -100000

		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>0 && m.ExperienceLevel()<5).Random()
			title = 名簿に記載されているエンジニアが利用可能であること
		}

		DATA
		{
			type = CelestialBody
			homeworld = HomeWorld()
			hidden = true
		}

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Engineer && m.Type() == Crew && m.ExperienceLevel() > @/mentorLevel)
			hidden = true
		}

		DATA
		{
			type = double
			newLevel = @/trainee.ExperienceLevel()+1
			expAward = @newLevel == 5 ? 32 : @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			mentorLevel = @/trainee.ExperienceLevel()+1
			hidden = true
		}

		DATA
		{
		type = string
		requiredValue = false
		broken = @/newLevel == 2 ? "landing legs" : "wheels"
		repairString = "訓練対象者 @/trainee はスキルを向上させる準備ができたようだ。 彼が @craft の @/broken を修理するのを手助けして、経験を得よう"
		tourString = "訓練対象者 @/trainee はスキルを向上させる準備ができたようだ。 訓練ツアーのために @/craft に搭乗して経験を得よう"
		hidden = true
		}

		DATA
		{
			type = List<Vessel>
			requiredValue = false
			l2Craft = AllVessels().Where(v => v.VesselType() == Lander)
			l3Craft = AllVessels().Where(v => v.VesselType() == Rover)
			l4Craft = AllVessels().Where(v => v.VesselType() == Station)
			l5Craft = AllVessels().Where(v => v.VesselType() == Base && v.CelestialBody() != @/homeworld)
			hidden = true
		}

		DATA
		{
			type = Vessel
			craft = @/newLevel == 5 ? @/l5Craft.Random() : @/newLevel == 4 ? @/l4Craft.Random() : @/newLevel == 3 ? @/l3Craft.Random() : @/l2Craft.Random()
			title = トレーニングコースの条件を満たす機体を所有していること
		}

				DATA
		{
			type = Location
			VesselLocation = @/craft.Location()
			hidden = true
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

	PARAMETER
	{
		name = FirstCheck
		type = All
		title = Bring @/trainee to @/craft
		hideChildren = true

			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/craft
			}

			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				kerbal = @/trainee
			}
	}

	PARAMETER
	{
		name = Repair
		type = All
		hideChildren = true
		completeInSequence = true
		title = 船外活動で @/broken を修理する

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}

				PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = EVA
		}

		REQUIREMENT
		{
		name = Expression
		type = Expression
		expression = (@/newLevel <4)
		}
	}

		PARAMETER
	{
		name = Tour
		type = VesselParameterGroup
		vessel = @/craft
		hideChildren = true
		completeInSequence = true
		title = 機体 @/craft で30日の訓練ツアーを実施する

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}

		REQUIREMENT
		{
		name = Expression
		type = Expression
		expression = (@/newLevel >3)
		}
	}

	PARAMETER
	{
		name = RepairTimer
		type = Duration
		duration = 2m
		preWaitText = 修理対応中
		waitingText = 修理中
		completionText = 修理完了
		startCriteria = PARAMETER_COMPLETION
		parameter = Repair

		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = (@/newLevel <4)
		}
	}

		PARAMETER
	{
		name = TourTimer
		type = Duration
		duration = 30d
		preWaitText = ツアーの開始を待っています
		waitingText = 機体 @/craft にてツアーを実行中
		completionText = ツアー完了!
		startCriteria = PARAMETER_COMPLETION
		parameter = Tour

		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = (@/newLevel >3)
		}
	}


	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/trainee.RosterStatus() == Available && @/mentorList.Count() == 0 && @/trainee.ExperienceLevel() < @/newLevel)
		title = アドバンスド・プログラムの受講資格があること（これが失敗しても、有効な訓練生が見つかれば、そのカーバルにはEngineering 101の受講資格がある）。
	}
}





