// Japanese translation by Erzen (https://github.com/Erzen02)
// v1.0
Localization
{
    ja
    {
        //////////////////////////////////////////////////////////////////////
        // Generic
        //////////////////////////////////////////////////////////////////////

        // Lists
        #cc.list.and.2 = <<1>> と <<2>>
        #cc.list.and.start = <<1>>、 <<2>>
        #cc.list.and.middle = <<1>>、 <<2>>
        #cc.list.and.end = <<1>>、と <<2>>
        #cc.list.or.2 = <<1>> または <<2>>
        #cc.list.or.start = <<1>>、 <<2>>
        #cc.list.or.middle = <<1>>、 <<2>>
        #cc.list.or.end = <<1>>、 または <<2>>

        // Science
        #cc.science.sit.InSpaceHigh = 高軌道
        #cc.science.sit.InSpaceLow = 低軌道
        #cc.science.location.Surface = 地表で
        #cc.science.location.Space = 宇宙空間で
        #cc.science.experiment.many = 様々な実験
        #cc.science.experiment.any = どれでも
        #cc.science.biomeKSC = カーバル宇宙センター
        #cc.science.biomeIdentifier = <<C:1>>\u2019s <<2>>
        #cc.science.deployedScienceReport = 展開されたサイエンスレポート

        // Part stuff
        #cc.parts.battery = バッテリー
        #cc.parts.dock = ドッキングポート
		#cc.parts.grapple = グラップリング装置

        // Expansions
		#cc.expansion.MakingHistory = Making History
        #cc.expansion.Serenity = Breaking Ground

        // Other stuff
        #cc.rateOfClimb = 上昇率
        #cc.altitude = 高度
        #cc.apoapsis = 遠点
        #cc.periapsis = 近点
        #cc.eccentricity = 軌道離心率
        #cc.inclination =  傾斜角
        #cc.acceleration = 加速度
        #cc.deltav.actual = デルタ-V (実際)
        #cc.deltav.vacuum = デルタ-v (真空)
        #cc.loadingtip = 契約を設定しています...
        #cc.experienceType = 特別な体験
		#cc.anyBody = あらゆる天体

        // Passenger loading
        #cc.loadPassengers.1 = 1つまたは複数の契約で、乗客の搭乗が必要です。 この機体に搭乗させますか？
        #cc.loadPassengers.2 = 搭乗した乗客:
        #cc.loadPassengers.3 = 機体の空席: <<1>>
        #cc.loadPassengers.passengerCount = <<N:1>> <<1[乗客/乗客達]>>: <<2>>
        #cc.loadPassengers.button = 乗客を搭乗させる
        #cc.loadPassengers.button.no = 乗客無し


        //////////////////////////////////////////////////////////////////////
        // Settings
        //////////////////////////////////////////////////////////////////////
        #cc.settings.Section = コンタクト・コンフィギュレータ
        #cc.settings.contractMultiplier.name = 有効契約倍率
        #cc.settings.contractMultiplier.desc = 有効な契約の制限数に適用される係数。
        #cc.settings.contractGroups = 契約グループ
        #cc.settings.stockContracts = Stockの契約


        //////////////////////////////////////////////////////////////////////
        // Agencies
        //////////////////////////////////////////////////////////////////////
        #cc.agency.AsteroidRecovery.name = 小惑星の回収
        #cc.agency.CometSample.name = 彗星サンプル
        #cc.agency.AsteroidRecovery.desc = アステロイドを買い取ります!  アステロイドの価格が高騰している今こそ、使わなくなった小惑星を売却する絶好のチャンスです。

        #cc.agency.BaseConstruction.name = 基地建設
        #cc.agency.BaseConstruction.desc = 太陽系の他の場所に基地を作ることが、人口過剰の解決策になるかもしれません。

        #cc.agency.CollectScience.name = サイエンスの収集
        #cc.agency.DeployedScience.name = サイエンスの展開
        #cc.agency.CollectScience.desc = ウェルナーにはチェックリストがあり、それを埋めるのはあなた次第です。SCIENCEで。

        #cc.agency.ContractConfigurator.name = コンタクト・コンフィギュレータ
        #cc.agency.ContractConfigurator.desc = これは、Contract Configurator 契約のデフォルトの代理店です。 これが表示されている場合、契約の作成者が代理店を指定していないことが原因です!

        #cc.agency.Exploration.name = 探索
        #cc.agency.Exploration.desc = カーバルが自分の限界に挑戦し、新たな境界を開拓する原動力は何でしょうか？ これらの契約です。

        #cc.agency.FlagPlanting.name = 旗の設置
        #cc.agency.FlagPlanting.desc = 我々の太陽系の天体には旗が不足している。 もっと旗が必要だ!

        #cc.agency.GrandTours.name = グランドツアー
        #cc.agency.GrandTours.desc = 宇宙プログラムに参加して、太陽系を見渡そう!

        #cc.agency.ISRU.name = ISRU
        #cc.agency.ISRU.desc = 鉱石を集めて別の天体に移動してほしいという依頼があります。 やってみる気はありませんか？

        #cc.agency.PartTesting.name = 部品テスト
        #cc.agency.PartTesting.desc = 私たちはたくさんの部品を持っていて、それらを使って宇宙船を作りたいと思っています。 しかし、その部品が宇宙で使えるかどうかはわかりません。 そこで、宇宙へ持っていってテストしてもらえると、とっても助かります。

        #cc.agency.RescueAndRecovery.name = 救出と回収
        #cc.agency.RescueAndRecovery.desc = 時々、カーバルは宇宙へ行き、戻ってくるのを忘れてしまうことがあります。 これは彼らの物語です。

        #cc.agency.Robotics.name = ロボティクス
        #cc.agency.RoboticArm.name = ロボットアームの契約
        #cc.agency.RoboticScienceRetrieval.name = ロボティク・サイエンス回収
        #cc.agency.Robotics.desc = ロボット技術を使って科学的知識を深めます。

        #cc.agency.Satellites.name = 人工衛星
        #cc.agency.Satellites.desc = 人工衛星は全てです！ あらゆる天体の周りを回る衛星がもっと必要です。すでに衛星をお持ちの方ですか？では軌道を変える必要があります!

        #cc.agency.Sentinel.name = 見守り役
        #cc.agency.Sentinel.Asteroid.name = 見守り役 (小惑星の検出)
        #cc.agency.Sentinel.Comet.name = 見守り役 (彗星の検出)
        #cc.agency.Sentinel.desc = センチネル赤外線望遠鏡は、命にかかわる小惑星の特定に貢献します。 これからも目が離せません。

        #cc.agency.Stations.name = ステーション
        #cc.agency.Stations.desc = 軌道上ステーションを建設して、大きな威信を手に入れよう!

        #cc.agency.Surveys.name = 調査
        #cc.agency.Surveys.desc = いろいろなところに行ってほしい。具体的な場所です。

        #cc.agency.Tourism.name = 観光
        #cc.agency.Tourism.desc = お客様はトロピカルシャツを準備しています。願わくば、旅程を終えたら、どこか晴れた場所で降ろしてあげてほしいです。

        // DMOS Agencies
        #cc.agency.Anomalies.name = アノマリー
        #cc.agency.AsteroidSurve.namey = 小惑星の調査
        #cc.agency.MagneticSurvey.name = 磁気探査
        #cc.agency.ReconnaisanceSurvey.name = 偵察調査
        #cc.agency.OrbitalSurvey.name = 軌道上調査


        //////////////////////////////////////////////////////////////////////
        // Mission Control UI
        //////////////////////////////////////////////////////////////////////
        #cc.mcui.title.trivial = 些細な契約:
        #cc.mcui.title.significant = 重要な契約:
        #cc.mcui.title.exceptional = 例外的な契約:
        #cc.mcui.title.allActive = すべての有効な契約:
        #cc.mcui.all = 全て
        #cc.mcui.max = 最大
        #cc.mcui.agent = 代理店:
        #cc.mcui.contract = 契約:
        #cc.mcui.briefing = ブリーフィング:
        #cc.mcui.preRequisites = 前提条件:
        #cc.mcui.offered = オファーされた:

        #cc.mcui.req.advance = 前払いのための資金 <<1>> が必要
        #cc.mcui.req.oneoff = 以前に完了していないこと
        #cc.mcui.req.maxCompletions = <<1>> 回のみ達成可能
        #cc.mcui.req.maxCompletions_reason = 過去に<<1>> 回完了した
        #cc.mcui.req.maxSimultaneous = 同時に <<1>> つ以上 <<2>> からのオファーや契約を受けていない
        #cc.mcui.req.keyValue = <<1>> は値を持っている
        #cc.mcui.req.researchBody = <<1>> に到達している
        #cc.mcui.status.met = 達成
        #cc.mcui.status.unmet = 未達成


        //////////////////////////////////////////////////////////////////////
        // Parameters
        //////////////////////////////////////////////////////////////////////

        // Generic strings
        #cc.param.count = カウント:
        #cc.param.count.none = 無し
        #cc.param.count.no = いいえ
        #cc.param.count.atLeast = 最低でも <<n:1>>
        #cc.param.count.atLeast.num = 最低でも <<1>>
        #cc.param.count.atMost = 最大で <<n:1>>
        #cc.param.count.atMost.num = 最大で <<1>>
        #cc.param.count.exact = <<N:1>>
        #cc.param.count.exact.num = <<1>>
        #cc.param.count.between = <<n:1>> から <<n:2>> の間で
        #cc.param.count.between.num = <<1>> から <<2>> の間で
        #cc.param.optionalTag = (オプション)
        #cc.param.vessel.any = どの機体でも
        #cc.param.vessel.Any = どの機体でも

        // Parameter specific strings
        #cc.param.All = これらの全てを完了する
        #cc.param.Any = これらのうち1つのみを完了する
        #cc.param.AtLeast = これらのうち <<n:1>> つ以上を完了する
        #cc.param.AtMost = これらのうち <<n:1>> 以下である
        #cc.param.Duration.preWait = 必要な待ち時間:
        #cc.param.Duration.waiting = 完了までの時間:
        #cc.param.Duration.completion = 待ち時間超過
        // count, trait, experience
        #cc.param.HasAstronaut.1 = 宇宙飛行士: <<1>>
        #cc.param.HasAstronaut.2 = 宇宙飛行士: <<1>> と <<2>>
        #cc.param.HasAstronaut.3 = 宇宙飛行士: <<1>> と <<2>> と <<3>>
        #cc.param.HasAstronaut.trait = <<1>> 特性
        #cc.param.HasAstronaut.experience.atLeast = 最低でも <<1>> の経験レベル
        #cc.param.HasAstronaut.experience.atMost = 最大で <<1>> の経験レベル
        #cc.param.HasAstronaut.experience.exact = <<1>> の経験レベル
        #cc.param.HasAstronaut.experience.between = <<1>> から <<2>> の間の経験レベル
        #cc.param.KerbalDeaths.generic = <<n:1[0名のカーバル/1名以下のカーバル/$d 名以下のカーバル]>> を死亡させる
        #cc.param.KerbalDeaths.vessel = 機体 <<2>> の <<n:1[0名のカーバル/1名以下のカーバル/$d 名以下のカーバル]>> を死亡させる
        #cc.param.KerbalDeaths.specific = 死亡させない
        #cc.param.MissionTimer = ミッションタイマー:
        #cc.param.None = 以下のすべてを防止する
        #cc.param.Not = 正しくない
        #cc.param.ParameterDelegate.MatchExtension.validate = と
        #cc.param.ParameterDelegate.MatchExtension.all = 全てを持つ
        #cc.param.ParameterDelegate.MatchExtension.none = 持っていない
        #cc.param.PerformOrbitalSurvey = <<1>> の軌道上資源調査を行う。
        #cc.param.ReachSpace = 宇宙に到達する
        #cc.param.RecoverKerbal.one = <<1>> を回収
        #cc.param.RecoverKerbal.many = カーバルを回収
        #cc.param.Sequence = 以下を順番に完了させる
        #cc.param.TargetDestroyed = <<N:1[$d ターゲット/$d ターゲット]>> 破壊された
        #cc.param.TargetDestroyed.target = ターゲット: <<1>>
        #cc.param.Timer.expired = 時間が超過しました!
        #cc.param.Timer.active = 残り時間: <<1>>
        #cc.param.Timer.inactive = 時間制限: <<1>>
        #cc.param.VesselParameterGroup.default = 機体: <<1>>
        #cc.param.VesselParameterGroup.trackedVessel = 追跡された機体: <<1>>
        #cc.param.VesselParameterGroup.newVessel = 機体: <<1>> (新しい)
        #cc.param.VesselParameterGroup.anyVessel = 機体: どれでも
        #cc.param.VesselParameterGroup.anyVesselList = 機体: 以下のうちどれでも: <<1>>
        #cc.param.VesselParameterGroup.anyVesselListEmpty = 機体: 以下のうちどれでも
        #cc.param.VesselParameterGroup.complete = 機体: <<1>>: <<2>>
        #cc.param.VesselParameterGroup.notes.noVessel = 現在、パラメータに一致する機体はありません。
        #cc.param.VesselParameterGroup.notes.activeVessel = 有効な機体。
        #cc.param.VesselParameterGroup.notes.waitingVessel = <<1>> の完了を待っています。
        #cc.param.VesselParameterGroup.time = 残り時間: <<1>>
        #cc.param.VesselParameterGroup.duration = 期間: <<1>>
        #cc.param.CollectScience.rm.None = 無し
        #cc.param.CollectScience.rm.Recover = 回収する
        #cc.param.CollectScience.rm.Transmit = 送信する
        #cc.param.CollectScience.rm.RecoverOrTransmit = 回収もしくは送信する
        #cc.param.CollectScience.0 = サイエンスを収集
        // Experiments, biome/CB, situation
        #cc.param.CollectScience.1 = サイエンスを収集: <<1>>
        #cc.param.CollectScience.2 = サイエンスを収集: <<2>> から <<1>> を
        #cc.param.CollectScience.3 = サイエンスを収集: <<3>> の間 <<2>> から <<1>> を
        #cc.param.CollectScience.destination = 目的地: <<C:1>>
        #cc.param.CollectScience.location = 場所: <<C:1>>
        #cc.param.CollectScience.biome = バイオーム: <<C:1>>
        #cc.param.CollectScience.situation = 状況: <<C:1>>
        #cc.param.CollectScience.experiment = 実験: <<1>>
        #cc.param.CollectScience.recovery = 回収: <<1>>
        #cc.param.Docking.1 = 次とドッキング: <<1>>
        #cc.param.Docking.2 = ドッキングする: <<1>> と <<2>>
        #cc.param.HasAntenna.transmit = 送信アンテナレート (複合): <<1>>
        #cc.param.HasAntenna.relay = 中継アンテナレート (複合): <<1>>
        #cc.param.HasCrew.unmanned = 無人
        // count, trait, experience
        #cc.param.HasCrew = クルー
        #cc.param.HasCrew.1 = クルー: <<1>>
        #cc.param.HasCrew.2 = クルー: <<2>> と一緒の <<1>>
        #cc.param.HasCrew.3 = クル: <<2>> と <<3>> と一緒の <<1>>
        #cc.param.HasCrew.trait = 特性: <<1>>
        #cc.param.HasCrew.experience = 経験レベル: <<1>>
        #cc.param.HasCrew.specific = <<1>>: 登場している
        #cc.param.HasCrewCapacity.none = 無し
        #cc.param.HasCrewCapacity = クルー容量: <<1>>
        #cc.param.HasPassenger = 乗客
        #cc.param.HasPassenger.initial = 発射場もしくは滑走路上で <<n:1[すべての乗客/$d 名の乗客/$d 名の乗客たち]>> を搭乗させる
        #cc.param.HasPassenger.summary = 乗客: <<1>>
        #cc.param.HasPassenger.detail = 搭乗中: <<1>>
        #cc.param.HasResource = 資源
        #cc.param.HasResource.capacity = 資源容量: <<1>>: <<2>>
        #cc.param.HasResource.resource = 資源: <<1>>: <<2>>
        #cc.param.HasResource.notzero = 0ユニットでない
        #cc.param.HasResource.measure = <<1>> ユニット分
        #cc.param.IsNotVessel = 機体: <<1>> でない
        #cc.param.NewVessel = 新しい機体を打ち上げる
        #cc.param.NoStaging = ステージされていない機体
        #cc.param.Orbit = 軌道に到達する
        #cc.param.Orbit.detail = 軌道に到達する: <<1>>
        #cc.param.Orbit.below.meters = <<C:1>>: <<2>> m より下に
        #cc.param.Orbit.above.meters = <<C:1>>: <<2>> m より上に
        #cc.param.Orbit.between.meters = <<C:1>>: <<2>> m から <<3>> m の間
        #cc.param.Orbit.below.nounits = <<C:1>>: <<2>> より下
        #cc.param.Orbit.above.nounits = <<C:1>>: <<2>> より上に
        #cc.param.Orbit.between.nounits = <<C:1>>: <<2>> から <<3>> の間
        #cc.param.Orbit.below.degrees = <<C:1>>: <<2>>\u00B0 より下に
        #cc.param.Orbit.above.degrees = <<C:1>>: <<2>>\u00B0 より上に
        #cc.param.Orbit.between.degrees = <<C:1>>:  <<2>>\u00B0 から <<3>>\u00B0 の間
        #cc.param.Orbit.specified = 指定された軌道に到達する
        #cc.param.PartValidation = パーツ
        #cc.param.PartValidation.nocount = パーツ: <<1>>
        #cc.param.PartValidation.atLeast = パーツ: 最低でも <<n:1>> つの <<2>>
        #cc.param.PartValidation.atMost = パーツ: 最大でも <<n:1>> つの <<2>>
        #cc.param.PartValidation.withModule = 次のモジュールと共に: <<1>>
        #cc.param.PartValidation.withModuleType = 次のモジュールタイプと共に: <<1>>
        // <<With/All have/None have>> <<2>>: <<3>>
        #cc.param.PartValidation.generic = <<1>> <<c:2>>: <<3>>
        #cc.param.PartValidation.type = <<1>> タイプ: <<2>>
        #cc.param.PartValidation.module = <<1>> モジュール: <<2>>
        #cc.param.PartValidation.moduleType = <<1>> モジュールタイプ: <<2>>
        #cc.param.PartValidation.moduleShort = <<1>> モジュール
        #cc.param.PartValidation.category = <<1>> カテゴリ: <<2>>
        #cc.param.PartValidation.manufacturer = <<1>> 製造メーカー: <<2>>
        #cc.param.ReachState = 機体の状態
        #cc.param.ReachState.detail = 機体の状態: <<1>>
        #cc.param.ReachState.altitudeTerrain = 高度 (対地)
        #cc.param.ReachState.below.speed = <<C:1>>: <<2>> m/s より遅い
        #cc.param.ReachState.above.speed = <<C:1>>: <<2>> m/s より速い
        #cc.param.ReachState.between.speed = <<C:1>>: <<2>> ms から <<3>> m/s の間
        #cc.param.ReachState.below.acceleration = <<C:1>>: <<2[$d G/$d G]>> より小さい
        #cc.param.ReachState.above.acceleration = <<C:1>>: <<2[$d G/$d G]>> より大きい
        #cc.param.ReachState.between.acceleration = <<C:1>>: <<2>> から <<3>> G の間
        #cc.param.Rendezvous.1 = 次とランデブーする: <<1>>
        #cc.param.Rendezvous.2 = ランデブーさせる: <<1>> と <<2>>
        #cc.param.ResourceConsumption.consumption = 資源を消費する: <<1>>: <<2>>
        #cc.param.ResourceConsumption.production = 資源を生産する: <<1>>: <<2>>
        #cc.param.ResourceConsumption.atLeast = 最小 <<1>> units/s
        #cc.param.ResourceConsumption.atMost = 最大 <<1>> units/s
        #cc.param.ResourceConsumption.between = <<1>> から <<2>> units/s の間
        #cc.param.ReturnHome = <<1>> に着陸もしくは着水する
        #cc.param.VesselDestroyed = 機体が破壊される
        #cc.param.VesselHasVisited.BoardVessel = <<1>> に搭乗する
        #cc.param.VesselHasVisited.Die = <<1>> で死亡する
        #cc.param.VesselHasVisited.Escape = <<1>> から脱出する
        #cc.param.VesselHasVisited.ExitVessel = <<1>> から出る
        #cc.param.VesselHasVisited.Flight = <<1>> で飛行する
        #cc.param.VesselHasVisited.Flyby = <<1>> の近くを飛行する
        #cc.param.VesselHasVisited.Land = <<1>> で着陸する
        #cc.param.VesselHasVisited.Launch = <<1>> から発射する
        #cc.param.VesselHasVisited.Orbit = <<1>> で軌道に到達する
        #cc.param.VesselHasVisited.PlantFlag = <<1>> で旗を立てる
        #cc.param.VesselHasVisited.Recover = <<1>> で回収する
        #cc.param.VesselHasVisited.Spawn = <<1>> でスポーンする
        #cc.param.VesselHasVisited.Suborbit = <<1>> で弾道飛行する
        #cc.param.VesselIsType = 機体の種類: <<1>>
        #cc.param.VesselMass = 重量: <<1>>
        #cc.param.VesselMass.atLeast = 最小 <<1>> トン
        #cc.param.VesselMass.atMost = 最大 <<1>> トン
        #cc.param.VesselMass.between = <<1>> から <<2>> トンの間で
        #cc.param.VesselNotDestroyed = 破壊されていない: <<1>>
        #cc.param.VesselNotDestroyed.any = どの機体も破壊されない
        #cc.param.VisitWaypoint = 場所: <<2>> の <<1>> m 下で


        //////////////////////////////////////////////////////////////////////
        // Requirements
        //////////////////////////////////////////////////////////////////////
        #cc.req.AcceptContract = 契約 <<1>> を承認している
        #cc.req.AcceptContract.x = 契約 <<1>> を承認していない
        #cc.req.All = 次の <color=#<<1>>>全て</color> を満たしている
        #cc.req.All.x = 次の <color=#<<1>>>どれか</color> を満たしていない
        #cc.req.AltitudeRecord = 高度が少なくとも <<1>> m に到達している
        #cc.req.AltitudeRecord.x = 高度が未だ <<1>> m に到達していない
        #cc.req.AltitudeRecord.additional = <<1>> (現在の記録: <<2>> m)
        #cc.req.Any = 次の <color=#<<1>>>どれか</color> を満たしている
        #cc.req.Any.x = 次の <color=#<<1>>>どれか</color> を満たしていない
        #cc.req.AtLeast = 次のうち最低 <color=#<<1>>><<n:2>></color> を満たしている
        #cc.req.AtMost = 次のうち最大 <color=#<<1>>><<n:2>></color> を満たしている
        #cc.req.CanResearchTech = <<1>> が研究可能である
        #cc.req.CanResearchTech.x = <<1>> が研究可能でない
        #cc.req.CompleteContract = 契約 <<1>> を完了している
        #cc.req.CompleteContract.x = 契約 <<1>> を完了していない
        #cc.req.CompleteContract.cooldown = 契約 <<1>> を直近 <<2>> で完了していない
        #cc.req.CompleteContract.cooldown.x = 契約 <<1>> を直近 <<2>> で完了している
        #cc.req.Expansion = DLC <<1>> を所持している
        #cc.req.Facility.exact = 施設 <<1>> がレベル <<n:2>> である
        #cc.req.Facility.atLeast = 施設 <<1>> が少なくともレベル <<n:2>> である
        #cc.req.Facility.atMost = 施設 <<1>> が最大でレベル <<n:2>> である
        #cc.req.FirstCrewToSurvive = 宇宙からクルーを回収する
        #cc.req.FirstCrewToSurvive.x = 宇宙からクルーを回収していない
        #cc.req.FirstLaunch = 最初の発射を行っている
        #cc.req.FirstLaunch.x = 最初の発射を行ってない
        #cc.req.Funds.between = 資金が <<1>> から <<2>> までの間所持している
        #cc.req.Funds.atLeast = 資金が最低でも <<1>> 所持している
        #cc.req.Funds.atMost = 資金が最大で <<1>> 未満でなくてはならない
        #cc.req.HasAstronaut.1 = 宇宙飛行士を <<c:1>> 名雇用している
        #cc.req.HasAstronaut.2 = <<2>> を持った宇宙飛行士を <<c:1>> 名雇用している
        #cc.req.HasAstronaut.3 =  <<2>> と <<3>> を持った宇宙飛行士を<<c:1>> 名雇用している
        #cc.req.HasAstronaut.1.x = 宇宙飛行士を <<c:1>> 名雇用していない
        #cc.req.HasAstronaut.2.x = <<2>> を持った宇宙飛行士を <<c:1>> 名雇用していない
        #cc.req.HasAstronaut.3.x = <<2>> と <<3>> を持った宇宙飛行士を<<c:1>> 名雇用していない
        #cc.req.KSCLanding = 宇宙センターに着陸する
        #cc.req.KSCLanding.x = 宇宙センターに着陸していない
        #cc.req.PartModuleTypeUnlocked = タイプ <<1>> の <<2[パーツ/パーツ]>> をアンロックしている
        #cc.req.PartModuleTypeUnlocked.x = タイプ <<1>> の <<2[パーツ/パーツ]>> をアンロックしていない
        #cc.req.PartModuleUnlocked = モジュール <<1>> の <<2[パーツ/パーツ]>> をアンロックしている
        #cc.req.PartModuleUnlocked.x = モジュール <<1>> の <<2[パーツ/パーツ]>> をアンロックしていない
        #cc.req.PartUnlocked = <<2[パーツ/パーツ]>> <<1>> をアンロックしている
        #cc.req.PartUnlocked.x = <<2[パーツ/パーツ]>> <<1>> をアンロックしていない
        #cc.req.PerformOrbitalSurvey = <<1>> の軌道調査を行っている
        #cc.req.PerformOrbitalSurvey.x = <<1>> の軌道調査を行っていない
        #cc.req.ReachSpace = 宇宙に到達している
        #cc.req.ReachSpace.x = 宇宙に未だ到達していない
        #cc.req.Reputation.between = <<1>> から <<2>> までの間の名声を持っている
        #cc.req.Reputation.atLeast = 最低でも <<1>> の名声を持っている
        #cc.req.Reputation.atMost = 最大で <<1>> の名声を持っている
        #cc.req.RunwayLanding = 滑走路上に着陸している
        #cc.req.RunwayLanding.x = 滑走路上に着陸していない
        #cc.req.Science.between = <<1>> から <<2>> までの間のサイエンスポイントを持っている
        #cc.req.Science.atLeast = 最低でも <<1>> のサイエンスポイントを持っている
        #cc.req.Science.atMost = 最大で <<1>> のサイエンスポイントを持っている
        #cc.req.Spacewalk = 宇宙空間歩行を行っている
        #cc.req.Spacewalk.x = 宇宙空間で歩行を行っていない
        #cc.req.TechResearched.tech = <<1>> を研究している
        #cc.req.TechResearched.tech.x = <<1>> を研究していない
        #cc.req.TechResearched.part = <<1>> の技術を研究している
        #cc.req.TechResearched.part.x = <<1>> の技術を研究していない
        #cc.req.ValidVessel = 機体 <<1>> が有効な機体である
        #cc.req.ValidVessel.x = 機体 <<1>> が有効でない機体である
        #cc.req.ProgressCelestialBody.genericBody = 目標の天体
        #cc.req.BaseConstruction = <<1[1つの/無人の/有人の]>> 基地が <<2>> に建設されている
        #cc.req.BaseConstruction.x = <<1[1つの/無人の/有人の]>> 基地が <<2>> に建設されていない
        #cc.req.Docking = <<2>> の付近で <<1[ドッキング/無人のドッキング/有人のドッキング]>> が行われる
        #cc.req.Docking.x = <<2>> の付近で <<1[ドッキング/無人のドッキング/有人のドッキング]>> が行われない
        #cc.req.Escape = <<2>> から <<1[脱出を試行/無人の脱出を試行/有人の脱出を試行]>> する
        #cc.req.Escape.x = <<2>> から <<1[脱出を試行/無人の脱出を試行/有人の脱出を試行]>> しない
        #cc.req.FlyBy = <<2>> <<1[の近くを飛行/の近くを無人で飛行/の近くを有人で飛行]>> する
        #cc.req.FlyBy.x = <<2>> <<1[の近くを飛行/の近くを無人で飛行/の近くを有人で飛行]>> しない
        #cc.req.Landing = <<2>> <<1[に着陸/に無人で着陸/に有人で着陸]>> する
        #cc.req.Landing.x = <<2>> <<1[に着陸/に無人で着陸/に有人で着陸]>> しない
        #cc.req.Orbit = <<2>> <<1[の周回軌道に到達/の周回軌道に無人で到達/の周回軌道に無人で到達]>> する
        #cc.req.Orbit.x = <<2>> <<1[の周回軌道に到達/の周回軌道に無人で到達/の周回軌道に無人で到達]>> しない
        #cc.req.Rendezvous = <<2>> の近くで <<1[有人もしくは無人で/無人で/有人で]>> ランデブーする
        #cc.req.Rendezvous.x = <<2>> の近くで <<1[有人もしくは無人で/無人で/有人で]>> ランデブーしない
        #cc.req.ReturnFromFlyBy = <<2>> <<1[の近くを飛行/の近くを無人で飛行/の近くを有人で飛行]>> から帰還する
        #cc.req.ReturnFromFlyBy.x = <<2>> <<1[の近くを飛行/の近くを無人で飛行/の近くを有人で飛行]>> から帰還しない
        #cc.req.ReturnFromSurface =  <<2>> の地表 <<1[から/から無人で/から有人で]>> 帰還する
        #cc.req.ReturnFromSurface.x = <<2>> の地表 <<1[から/から無人で/から有人で]>> 帰還しない
        #cc.req.ReturnFromOrbit = <<2>> の周回軌道 <<1[から/から無人で/から有人で]>> 帰還する
        #cc.req.ReturnFromOrbit.x = <<2>> の周回軌道 <<1[から/から無人で/から有人で]>> 帰還しない
        #cc.req.SurfaceEVA = <<2>> の上で船外活動をする
        #cc.req.SurfaceEVA.x = <<2>> の上で船外活動をしない
        #cc.req.SplashDown = <<2>> <<1[に着水/に無人機体で着水/に有人機体で着水]>> する
        #cc.req.SplashDown.x = <<2>> <<1[に着水/に無人機体で着水/に有人機体で着水]>> しない


        //////////////////////////////////////////////////////////////////////
        // SCANsat
        //////////////////////////////////////////////////////////////////////
        #cc.scansat.scan.Anomaly = アノマリースキャン
        #cc.scansat.scan.AnomalyDetail = アノマリースキャン (詳細)
        #cc.scansat.scan.Biome = バイオームスキャン
        #cc.scansat.scan.ResourceLoRes = 資源スキャン (低解像度)
        #cc.scansat.scan.ResourceHiRes = 資源スキャン (高解像度)
        #cc.scansat.scan.VisualLoRes = ビジュアルスキャン (低解像度)
        #cc.scansat.scan.VisualHiRes = ビジュアルスキャン (高解像度)
        // Scan Type, Body, Coverage
        #cc.scansat.param.SCANsatCoverage = <<2>> の <<1>>: <<3>>%
        #cc.scansat.param.SCANsatCoverage.inProgress = <<2>> の <<1>>: <<3>>% / <<4>>%
        // MinCoverage, MaxCoverage, Scan Type, Body
        #cc.scansat.req.SCANsatCoverage.between = <<3>> の <<4>> のカバー範囲が <<1>>% から <<2>>% の間である
        #cc.scansat.req.SCANsatCoverage.atLeast = <<3>> の <<2>> が少なくとも <<1>>% である
        #cc.scansat.req.SCANsatCoverage.atMost = <<3>> の <<2>> が最大 <<1>>% である
        // Scan Type, Latitude, Longitude, Body, Scan Type
        #cc.scansat.req.SCANsatLocationCoverage = Must have completed a <<1>> at location <<2>>, <<3>> on <<4>>
        #cc.scansat.req.SCANsatLocationCoverage.x = Must not have completed a <<1>> at location <<2>>, <<3>> on <<4>>


        //////////////////////////////////////////////////////////////////////
        // RemoteTech
        //////////////////////////////////////////////////////////////////////
        #cc.remotetech.param.CelestialBodyCoverage = 通信カバー率: <<1>>: <<2>>%
        #cc.remotetech.param.CelestialBodyCoverage.inProgress = 通信カバー率: <<1>>: <<2>>% / <<3>>%
        #cc.remotetech.param.HasAntenna.type = 種類: <<1>>
        #cc.remotetech.param.HasAntenna.target = 目標: <<C:1>>
        #cc.remotetech.param.HasAntenna.activated = 有効化されている
        #cc.remotetech.param.HasAntenna.powered = 電源が供給されている
        #cc.remotetech.param.HasAntenna.range = 範囲: <<1>>
        #cc.remotetech.param.HasAntenna.range.body = 範囲: <<1>> の範囲内
        #cc.remotetech.param.KSCConnectivity = 宇宙センターに接続されている
        #cc.remotetech.param.KSCConnectivity.x = 宇宙センターに接続されていない
        #cc.remotetech.param.SignalDelay = 通信遅延: <<1>> 秒
        #cc.remotetech.param.VesselConnectivity = 直接通信している: <<1>>
        #cc.remotetech.param.VesselConnectivity.x = 直接通信していない: <<1>>
        #cc.remotetech.req.activeVesselRange = <<1>> の周回軌道上にアンテナもしくはディッシュアンテナを装備し最大でも <<2>> km の範囲にあるRemoteTech衛星が存在する
        #cc.remotetech.req.activeVesselRange.x = <<1>> の周回軌道上にアンテナもしくはディッシュアンテナを装備し最大でも <<2>> km の範囲にあるRemoteTech衛星が存在しない


        //////////////////////////////////////////////////////////////////////
        // Kerbal Konstructs
        //////////////////////////////////////////////////////////////////////
        #cc.kk.req.BaseUnlocked = 基地 <<1>> がアンロックされている
        #cc.kk.req.BaseLocked = 基地 <<1>> がロックされている
        #cc.kk.req.BaseOpen = 基地 <<1>> が開放されている
        #cc.kk.req.BaseClosed = 基地 <<1>> が閉鎖されている
        #cc.kk.req.BaseExists = 基地 <<1>> が存在している
        #cc.kk.req.BaseExists.x = 基地 <<1>> が存在しない
    }
}
